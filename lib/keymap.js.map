{"version":3,"sources":["../src/keymap.js"],"names":["logger","require","clipboard","module","exports","CodeMirror","defaultKeymap","_defaultKeymap","keys","type","toKeys","context","action","motion","motionArgs","linewise","toJumplist","forward","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","isEdit","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","replace","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultExCommandMap","name","shortName","possiblyAsync","excludeFromCommandHistory","Pos","Vim","enterVimMode","cm","setOption","signal","mode","on","onCursorActivity","maybeInitVimState","getInputField","getOnPasteFn","leaveVimMode","off","state","vim","detachVimMap","next","keyMap","rmClass","getWrapperElement","attach","attachVimMap","prev","addClass","defineOption","val","getOption","Init","test","cmKey","key","undefined","vimKey","cmKeyToVimKey","cmd","findKey","modifiers","specialKeys","Enter","Backspace","Delete","Insert","charAt","pieces","split","lastPiece","length","hasCharacter","i","piece","isUpperCase","toLowerCase","join","onPasteFn","insertMode","setCursor","offsetCursor","getCursor","actions","enterInsertMode","numberRegex","wordCharTest","isWordChar","ch","bigWordCharTest","makeKeyRange","start","size","push","String","fromCharCode","upperCaseAlphabet","lowerCaseAlphabet","numbers","validMarks","concat","validRegisters","isLine","line","firstLine","lastLine","isLowerCase","k","isMatchableSymbol","indexOf","isNumber","isWhiteSpaceString","inArray","arr","options","defaultValue","aliases","callback","Error","value","cfg","option","scope","local","createCircularJumpList","pointer","head","tail","buffer","Array","add","oldCur","newCur","current","curMark","useNextSlot","cursor","trashMark","clear","setBookmark","markPos","find","cursorEqual","move","offset","mark","inc","cachedCursor","createInsertModeChanges","c","changes","expectCursorActivityForChange","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","prototype","exitMacroRecordMode","macroModeState","vimGlobalState","enterMacroRecordMode","registerName","register","registerController","getRegister","openDialog","bottom","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","marks","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","sel","resetVimGlobalState","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","lastCharacterSearch","increment","selectedCharacter","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","optionName","lastInsertModeKeyTimer","vimApi","buildKeyMap","getRegisterController","getVimGlobalState","suppressErrorLogging","InsertModeKey","map","lhs","rhs","ctx","exCommandDispatcher","unmap","defineEx","prefix","func","exCommands","commandMap_","handleKey","origin","command","handleMacroRecording","clearInputState","logKey","handleEsc","exitVisualMode","exitInsertMode","doKeyToKey","match","exec","substring","index","handleKeyInsertMode","keyBuffer","debug","keysAreChars","commandDispatcher","matchCommand","slice","thisMatch","window","clearTimeout","setTimeout","selections","listSelections","here","replaceRange","pop","handleKeyNonInsertMode","keysMatcher","pushRepeatDigit","operation","curOp","isVimOp","processCommand","e","console","handleEx","input","defineMotion","defineAction","defineOperator","mapCommand","_mapCommand","defineRegister","prefixRepeat","motionRepeat","n","getRepeat","repeat","parseInt","reason","Register","text","insertModeChanges","searchQueries","setText","pushText","pushInsertModeChanges","pushSearchQuery","query","toString","registers","unnamedRegister","isValidRegister","reg","writeText","shiftNumericRegisters_","append","historyBuffer","iterator","initialPrefix","nextMatch","up","dir","element","j","pushInput","splice","reset","matches","commandMatches","full","partial","bestMatch","character","lastChar","repeatOverride","processMotion","processOperator","processOperatorMotion","processAction","processSearch","processEx","copyArgs","evalInput","repeatIsExplicit","recordLastEdit","getSearchCursor","getSearchState","setReversed","promptPrefix","originalQuery","getQuery","originalScrollPos","getScrollInfo","handleQuery","ignoreCase","smartCase","updateSearchQuery","showConfirm","onPromptClose","scrollTo","left","top","logSearchQuery","onPromptKeyUp","close","keyName","target","selectionEnd","selectionStart","Math","min","parsedQuery","scrollIntoView","findNext","clearSearchHighlight","onPromptKeyDown","e_stop","focus","shift","showPrompt","onClose","desc","searchPromptDesc","onKeyUp","onKeyDown","word","expandWordUnderCursor","isKeyword","getLine","end","escapeRegex","exArgs","origHead","copyCursor","clipCursorToContent","origAnchor","anchor","oldHead","oldAnchor","newHead","newAnchor","noRepeat","motionResult","motions","recordJumpPosition","Infinity","updateCmSelection","updateMark","cursorIsBefore","lastSel","lineOffset","abs","chOffset","curStart","curEnd","cmSel","cursorMin","cursorMax","makeCmSelection","ranges","lineLength","tmp","expandSelectionToLine","clipToLine","exclusive","setSelections","primary","operatorMoveTo","operators","actionCommand","moveToTopLine","_head","getUserVisibleLines","findFirstNonWhiteSpaceCharacter","moveToMiddleLine","range","floor","moveToBottomLine","expandToLine","_cm","cur","isReversed","highlightSearchMatches","goToMark","pos","getMarkPos","moveToOtherHighlightedEnd","jumpToMark","best","isWrongDirection","equal","between","cursorIsBetween","moveByCharacters","moveByLines","endCh","moveByDisplayLines","moveByScroll","moveToColumn","moveToEol","first","last","moveToStartOfLine","charCoords","res","findPosV","hitSide","lastCharCoords","goalCoords","coordsChar","resCoords","moveByPage","moveByParagraph","findParagraph","scrollbox","clientHeight","defaultTextHeight","orig","dest","moveByWords","moveToWord","moveTillCharacter","moveToCharacter","recordLastCharacterSearch","moveToSymbol","findSymbol","retval","clipPos","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","lineText","symbol","style","getTokenTypeAt","matched","findMatchingBracket","to","moveToLineOrEdgeOfDocument","lineNum","textObjectManipulation","mirroredPairs","selfPaired","selectCompanionObject","findBeginningAndEnd","expandSelection","repeatLastCharacterSearch","lastSearch","moveH","fn","fillArray","times","change","args","finalHead","inVisualBlock","getRange","lastState","prevLineEnd","Number","MAX_VALUE","wasLastLine","commands","newlineAndIndent","getSelection","replacement","replaceSelections","includeLineBreak","indent","startLine","endLine","indentLine","changeCase","getSelections","swapped","toSwap","toUpperCase","yank","endPos","jumpListWalk","scroll","lineHeight","delta","newPos","cursorCoords","ceil","newBottom","scrollToCursor","height","y","replayMacro","executeMacroRegister","toggleOverwrite","overwrite","classList","remove","JSON","stringify","max","onChange","onKeyEventTargetKeyDown","selectForInsert","toggleVisualMode","subMode","reselectLastSelection","_actionArgs","updateLastSelection","anchorMark","headMark","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineFn","newlineAndIndentContinueComment","paste","tabSize","whitespaceLength","str","tabs","spaces","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","idx","lastSelectionCurEnd","selectedArea","getSelectedAreaRange","selectedText","emptyStrings","selectBlock","posFromIndex","indexFromPos","lastCh","extendLineToColumn","undo","repeatFn","redo","setRegister","setMark","markName","replaceWith","replaceTo","replaceWithStr","incrementNumberToken","lineStr","re","numberStr","token","number","from","repeatLastEdit","maxCh","ret","prop","hasOwnProperty","offsetLine","offsetCh","getOffset","commandMatch","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","cur1","cur2","arguments","apply","call","cur3","cur1before2","cur2before3","trim","s","column","isClipped","curHead","primIndex","getIndex","wasClipped","base","baseCh","headCh","newDir","lineHead","atAnchor","atHead","getCurrentSelectedAreaRange","getLastSelectedAreaRange","block","width","setSelection","updateFakeCursor","headOffset","anchorOffset","right","getHead","moveHead","selection","lines","firstNonWS","search","_forward","noSymbol","wordStart","symbolToMode","findSymbolModes","bracket","isComplete","nextCh","symb","depth","reverseSymb","section","init","curMoveThrough","comment","found","method","preprocess","lineCount","curCh","lineLen","findWord","emptyLineIsWord","charTests","stop","foundWord","words","eodCh","shortCircuit","firstWord","lastWord","charIdxInLine","includeChar","lastIndexOf","isEmpty","isBoundary","any","startState","bracketRegexp","openSym","curChar","scanForBracket","chars","len","firstIndex","SearchState","setQuery","getOverlay","searchOverlay","setOverlay","overlay","reversed","getScrollbarAnnotate","annotate","setScrollbarAnnotate","searchState_","dialog","template","shortText","selectValueOnOpen","prompt","splitBySlash","argString","slashes","findUnescapedSlashes","tokens","escapeNextChar","translateRegex","specials","unescape","out","specialComesNext","charUnescapes","translateRegexReplace","unescapes","unescapeRegexReplace","stream","StringStream","output","eol","peek","matcher","parseQuery","lastSearchRegister","RegExp","regexPart","forceIgnoreCase","flagsPart","regexp","openNotification","duration","alert","makePrompt","raw","regexEqual","r1","r2","props","rawQuery","source","matchSol","sol","skipToEnd","backUp","searchState","removeOverlay","addOverlay","showMatchesOnScrollbar","isInRange","scrollInfo","occludeToleranceTop","occludeToleranceBottom","bottomY","history","doc","done","event","ExCommandDispatcher","buildCommandMap_","opt_params","that","_processCommand","commandHistoryRegister","previousCommand","inputStream","params","parseInput_","commandName","matchCommand_","parseCommandArgs_","toInput","result","eatWhile","eat","lineEnd","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","user","mapping","unshift","colorscheme","mapArgs","imap","nmap","vmap","set","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","message","setOptionReturn","setlocal","setglobal","regArgs","regInfo","sort","reverse","unique","pattern","parseArgs","eatSpace","opts","decimal","hex","octal","substr","err","lineStart","radix","numPart","textPart","matchPart","compareFn","a","b","anum","bnum","comparePatternFn","textOld","global","matchedLines","content","nextCommand","substitute","replacePart","trailing","count","confirm","startPos","doReplace","write","save","nohlsearch","delmarks","sym","startMark","finishMark","charCodeAt","finish","searchCursor","exMode","lastPos","replaceAll","newText","_value","savedCallback","detach","insertModeChangeRegister","lastChange","selLength","logInsertModeChange","extra","fallthrough","imc","repeatInsertModeChanges","changeObj","maybeReset","handleExternalSelection","markText","className","somethingSelected","onKeyFound","lookupKey","repeatForInsert","isAction","cachedInputState","repeatCommand","repeatInsert","changeObject","keyHandler","binding"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeyMap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\nconst { logger } = require('inkdrop')\nconst { clipboard } = require('electron')\n\nmodule.exports = function (CodeMirror) {\n  var defaultKeymap = [\n  ]\n  var _defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal' },\n    //\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar: true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar: true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar: true, repeatOffset: -1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context: 'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context: 'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ]\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ]\n\n  var Pos = CodeMirror.Pos\n\n  var Vim = function () {\n    function enterVimMode (cm) {\n      cm.setOption('disableInput', true)\n      cm.setOption('showCursorWhenSelecting', false)\n      CodeMirror.signal(cm, 'vim-mode-change', {mode: 'normal'})\n      cm.on('cursorActivity', onCursorActivity)\n      maybeInitVimState(cm)\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm))\n    }\n\n    function leaveVimMode (cm) {\n      cm.setOption('disableInput', false)\n      cm.off('cursorActivity', onCursorActivity)\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm))\n      cm.state.vim = null\n    }\n\n    function detachVimMap (cm, next) {\n      if (this == CodeMirror.keyMap.vim) { CodeMirror.rmClass(cm.getWrapperElement(), 'cm-fat-cursor') }\n\n      if (!next || next.attach != attachVimMap) { leaveVimMode(cm) }\n    }\n    function attachVimMap (cm, prev) {\n      if (this == CodeMirror.keyMap.vim) { CodeMirror.addClass(cm.getWrapperElement(), 'cm-fat-cursor') }\n\n      if (!prev || prev.attach != attachVimMap) { enterVimMode(cm) }\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function (cm, val, prev) {\n      if (val && cm.getOption('keyMap') != 'vim') { cm.setOption('keyMap', 'vim') } else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption('keyMap'))) { cm.setOption('keyMap', 'default') }\n    })\n\n    function cmKey (key, cm) {\n      if (!cm) { return undefined }\n      if (this[key]) { return this[key] }\n      var vimKey = cmKeyToVimKey(key)\n      if (!vimKey) {\n        return false\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey)\n      if (typeof cmd === 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey)\n      }\n      return cmd\n    }\n\n    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'}\n    var specialKeys = {Enter: 'CR', Backspace: 'BS', Delete: 'Del', Insert: 'Ins'}\n    function cmKeyToVimKey (key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1)\n      }\n      var pieces = key.split(/-(?!$)/)\n      var lastPiece = pieces[pieces.length - 1]\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false\n      }\n      var hasCharacter = false\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i]\n        if (piece in modifiers) { pieces[i] = modifiers[piece] } else { hasCharacter = true }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece] }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase()\n      }\n      return '<' + pieces.join('-') + '>'\n    }\n\n    function getOnPasteFn (cm) {\n      var vim = cm.state.vim\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function () {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1))\n            actions.enterInsertMode(cm, {}, vim)\n          }\n        }\n      }\n      return vim.onPasteFn\n    }\n\n    var numberRegex = /[\\d]/\n    var wordCharTest = [CodeMirror.isWordChar, function (ch) {\n        return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch)\n      }], bigWordCharTest = [function (ch) {\n        return /\\S/.test(ch)\n      }]\n    function makeKeyRange (start, size) {\n      var keys = []\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i))\n      }\n      return keys\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26)\n    var lowerCaseAlphabet = makeKeyRange(97, 26)\n    var numbers = makeKeyRange(48, 10)\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>'])\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/'])\n\n    function isLine (cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine()\n    }\n    function isLowerCase (k) {\n      return (/^[a-z]$/).test(k)\n    }\n    function isMatchableSymbol (k) {\n      return '()[]{}'.indexOf(k) != -1\n    }\n    function isNumber (k) {\n      return numberRegex.test(k)\n    }\n    function isUpperCase (k) {\n      return (/^[A-Z]$/).test(k)\n    }\n    function isWhiteSpaceString (k) {\n      return (/^\\s*$/).test(k)\n    }\n    function inArray (val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true\n        }\n      }\n      return false\n    }\n\n    var options = {}\n    function defineOption (name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided')\n      }\n      if (!type) { type = 'string' }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      }\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name]\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue)\n      }\n    }\n\n    function setOption (name, value, cm, cfg) {\n      var option = options[name]\n      cfg = cfg || {}\n      var scope = cfg.scope\n      if (!option) {\n        return new Error('Unknown option: ' + name)\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value)\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined)\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm)\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value}\n        }\n      }\n    }\n\n    function getOption (name, cm, cfg) {\n      var option = options[name]\n      cfg = cfg || {}\n      var scope = cfg.scope\n      if (!option) {\n        return new Error('Unknown option: ' + name)\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm)\n        if (scope !== 'global' && local !== undefined) {\n          return local\n        }\n        if (scope !== 'local') {\n          return option.callback()\n        }\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name])\n        return (local || (scope !== 'local') && option || {}).value\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function (name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode')\n        return mode == 'null' ? '' : mode\n      } else {\n        var mode = name == '' ? 'null' : name\n        cm.setOption('mode', mode)\n      }\n    })\n\n    var createCircularJumpList = function () {\n      var size = 100\n      var pointer = -1\n      var head = 0\n      var tail = 0\n      var buffer = new Array(size)\n      function add (cm, oldCur, newCur) {\n        var current = pointer % size\n        var curMark = buffer[current]\n        function useNextSlot (cursor) {\n          var next = ++pointer % size\n          var trashMark = buffer[next]\n          if (trashMark) {\n            trashMark.clear()\n          }\n          buffer[next] = cm.setBookmark(cursor)\n        }\n        if (curMark) {\n          var markPos = curMark.find()\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur)\n          }\n        } else {\n          useNextSlot(oldCur)\n        }\n        useNextSlot(newCur)\n        head = pointer\n        tail = pointer - size + 1\n        if (tail < 0) {\n          tail = 0\n        }\n      }\n      function move (cm, offset) {\n        pointer += offset\n        if (pointer > head) {\n          pointer = head\n        } else if (pointer < tail) {\n          pointer = tail\n        }\n        var mark = buffer[(size + pointer) % size]\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1\n          var newCur\n          var oldCur = cm.getCursor()\n          do {\n            pointer += inc\n            mark = buffer[(size + pointer) % size]\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break\n            }\n          } while (pointer < head && pointer > tail)\n        }\n        return mark\n      }\n      return {\n        cachedCursor: undefined, // used for # and * jumps\n        add: add,\n        move: move\n      }\n    }\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function (c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        }\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      }\n    }\n\n    function MacroModeState () {\n      this.latestRegister = undefined\n      this.isPlaying = false\n      this.isRecording = false\n      this.replaySearchQueries = []\n      this.onRecordingDone = undefined\n      this.lastInsertModeChanges = createInsertModeChanges()\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function () {\n        var macroModeState = vimGlobalState.macroModeState\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone() // close dialog\n        }\n        macroModeState.onRecordingDone = undefined\n        macroModeState.isRecording = false\n      },\n      enterMacroRecordMode: function (cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName)\n        if (register) {\n          register.clear()\n          this.latestRegister = registerName\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)[' + registerName + ']', null, {bottom: true})\n          }\n          this.isRecording = true\n        }\n      }\n    }\n\n    function maybeInitVimState (cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        }\n      }\n      return cm.state.vim\n    }\n    var vimGlobalState\n    function resetVimGlobalState () {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState(),\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment: 0, forward: true, selectedCharacter: ''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController: new HistoryController()\n      }\n      for (var optionName in options) {\n        var option = options[optionName]\n        option.value = option.defaultValue\n      }\n    }\n\n    var lastInsertModeKeyTimer\n    var vimApi = {\n      buildKeyMap: function () {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function () {\n        return vimGlobalState.registerController\n      },\n      resetVimGlobalState: resetVimGlobalState,\n      getVimGlobalState: function () {\n        return vimGlobalState\n      },\n      maybeInitVimState: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function (lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx)\n      },\n      unmap: function (lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx)\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function (name, prefix, func) {\n        if (!prefix) {\n          prefix = name\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"' + prefix + '\" is not a prefix of \"' + name + '\", command not registered')\n        }\n        exCommands[name] = func\n        exCommandDispatcher.commandMap_[prefix] = {name: name, shortName: prefix, type: 'api'}\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin)\n        if (typeof command === 'function') {\n          return command()\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function (cm, key, origin) {\n        var vim = maybeInitVimState(cm)\n        function handleMacroRecording () {\n          var macroModeState = vimGlobalState.macroModeState\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode()\n              clearInputState(cm)\n              return true\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key)\n            }\n          }\n        }\n        function handleEsc () {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm)\n            if (vim.visualMode) {\n              exitVisualMode(cm)\n            } else if (vim.insertMode) {\n              exitInsertMode(cm)\n            }\n            return true\n          }\n        }\n        function doKeyToKey (keys) {\n          // TODO: prevent infinite recursion.\n          var match\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys)\n            key = match[0]\n            keys = keys.substring(match.index + key.length)\n            CodeMirror.Vim.handleKey(cm, key, 'mapping')\n          }\n        }\n\n        function handleKeyInsertMode () {\n          if (handleEsc()) { return true }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key\n          logger.debug('keyBuffer:', keys)\n          var keysAreChars = key.length == 1\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert')\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type !== 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1)\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert')\n            if (thisMatch.type !== 'none') {\n              match = thisMatch\n            }\n          }\n          if (match.type === 'none') {\n            clearInputState(cm)\n            return false\n          } else if (match.type === 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer) }\n            lastInsertModeKeyTimer = window.setTimeout(() => {\n              if (vim.insertMode && vim.inputState.keyBuffer) {\n                clearInputState(cm)\n              }\n            }, getOption('insertModeEscKeysTimeout'))\n            return !keysAreChars\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer) }\n          if (keysAreChars) {\n            var selections = cm.listSelections()\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input')\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop()\n          }\n          clearInputState(cm)\n          return match.command\n        }\n\n        function handleKeyNonInsertMode () {\n          if (handleMacroRecording() || handleEsc()) { return true };\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key\n          if (/^[1-9]\\d*$/.test(keys)) { return true }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys)\n          if (!keysMatcher) { clearInputState(cm); return false }\n          var context = vim.visualMode ? 'visual' : 'normal'\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context)\n          if (match.type === 'none') {\n            clearInputState(cm)\n            return false\n          } else if (match.type === 'partial') {\n            return true\n          }\n\n          vim.inputState.keyBuffer = ''\n          keysMatcher = /^(\\d*)(.*)$/.exec(keys)\n          if (keysMatcher[1] && keysMatcher[1] !== '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1])\n          }\n          return match.command\n        }\n\n        var command\n        if (vim.insertMode) {\n          command = handleKeyInsertMode()\n        } else {\n          command = handleKeyNonInsertMode()\n        }\n\n        logger.debug('keyBuffer::::', command, vim.inputState.keyBuffer, vim.inputState.operator, vim.inputState.operatorArgs)\n\n        if (command === false) {\n          return undefined\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function () { return true }\n        } else {\n          return function () {\n            return cm.operation(function () {\n              cm.curOp.isVimOp = true\n              try {\n                if (command.type === 'keyToKey') {\n                  doKeyToKey(command.toKeys)\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command)\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined\n                maybeInitVimState(cm)\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e)\n                }\n                throw e\n              }\n              return true\n            })\n          }\n        }\n      },\n      handleEx: function (cm, input) {\n        exCommandDispatcher.processCommand(cm, input)\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode,\n      clearInputState: clearInputState,\n\n      cmKeyToVimKey: cmKeyToVimKey\n    }\n\n    // Represents the current input state.\n    function InputState () {\n      this.prefixRepeat = []\n      this.motionRepeat = []\n\n      this.operator = null\n      this.operatorArgs = null\n      this.motion = null\n      this.motionArgs = null\n      this.keyBuffer = [] // For matching multi-key commands.\n      this.registerName = null // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function (n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n)\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n)\n      }\n    }\n    InputState.prototype.getRepeat = function () {\n      var repeat = 0\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10)\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10)\n        }\n      }\n      return repeat\n    }\n\n    function clearInputState (cm, reason) {\n      cm.state.vim.inputState = new InputState()\n      CodeMirror.signal(cm, 'vim-command-done', reason)\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register (text, linewise, blockwise) {\n      this.clear()\n      this.keyBuffer = [text || '']\n      this.insertModeChanges = []\n      this.searchQueries = []\n      this.linewise = !!linewise\n      this.blockwise = !!blockwise\n    }\n    Register.prototype = {\n      setText: function (text, linewise, blockwise) {\n        this.keyBuffer = [text || '']\n        this.linewise = !!linewise\n        this.blockwise = !!blockwise\n      },\n      pushText: function (text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n')\n          }\n          this.linewise = true\n        }\n        this.keyBuffer.push(text)\n      },\n      pushInsertModeChanges: function (changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes))\n      },\n      pushSearchQuery: function (query) {\n        this.searchQueries.push(query)\n      },\n      clear: function () {\n        this.keyBuffer = []\n        this.insertModeChanges = []\n        this.searchQueries = []\n        this.linewise = false\n      },\n      toString: function () {\n        return this.keyBuffer.join('')\n      }\n    }\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister (name, register) {\n      var registers = vimGlobalState.registerController.registers\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character')\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name)\n      }\n      registers[name] = register\n      validRegisters.push(name)\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController (registers) {\n      this.registers = registers\n      this.unnamedRegister = registers['\"'] = new Register()\n      registers['.'] = new Register()\n      registers[':'] = new Register()\n      registers['/'] = new Register()\n    }\n    RegisterController.prototype = {\n      pushText: function (registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n') {\n          text += '\\n'\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName)\n            ? this.getRegister(registerName) : null\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              const reg = new Register(text, linewise, blockwise)\n              logger.debug('yanked:', reg)\n              this.registers['0'] = reg\n              clipboard.writeText(reg.keyBuffer[0])\n              break\n            case 'delete':\n              clipboard.writeText(text)\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise)\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_()\n                this.registers['1'] = new Register(text, linewise)\n              }\n              break\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise)\n          return\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName)\n        if (append) {\n          register.pushText(text, linewise)\n        } else {\n          register.setText(text, linewise, blockwise)\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise)\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function (name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister\n        }\n        name = name.toLowerCase()\n        if (!this.registers[name]) {\n          this.registers[name] = new Register()\n        }\n        return this.registers[name]\n      },\n      isValidRegister: function (name) {\n        return name && inArray(name, validRegisters)\n      },\n      shiftNumericRegisters_: function () {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1))\n        }\n      }\n    }\n    function HistoryController () {\n      this.historyBuffer = []\n      this.iterator = 0\n      this.initialPrefix = null\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer\n        var dir = up ? -1 : 1\n        if (this.initialPrefix === null) this.initialPrefix = input\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i += dir) {\n          var element = historyBuffer[i]\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i\n              return element\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length\n          return this.initialPrefix\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0) return input\n      },\n      pushInput: function (input) {\n        var index = this.historyBuffer.indexOf(input)\n        if (index > -1) this.historyBuffer.splice(index, 1)\n        if (input.length) this.historyBuffer.push(input)\n      },\n      reset: function () {\n        this.initialPrefix = null\n        this.iterator = this.historyBuffer.length\n      }\n    }\n    var commandDispatcher = {\n      matchCommand: function (keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState)\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'}\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'}\n        }\n\n        var bestMatch\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i]\n          if (!bestMatch) {\n            bestMatch = match\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys)\n          if (!character) return {type: 'none'}\n          inputState.selectedCharacter = character\n        }\n        return {type: 'full', command: bestMatch}\n      },\n      processCommand: function (cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command)\n            break\n          case 'operator':\n            this.processOperator(cm, vim, command)\n            break\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command)\n            break\n          case 'action':\n            this.processAction(cm, vim, command)\n            break\n          case 'search':\n            this.processSearch(cm, vim, command)\n            break\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command)\n            break\n          default:\n            break\n        }\n      },\n      processMotion: function (cm, vim, command) {\n        vim.inputState.motion = command.motion\n        vim.inputState.motionArgs = copyArgs(command.motionArgs)\n        this.evalInput(cm, vim)\n      },\n      processOperator: function (cm, vim, command) {\n        var inputState = vim.inputState\n        if (inputState.operator) {\n          if (inputState.operator === command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine'\n            inputState.motionArgs = { linewise: true }\n            this.evalInput(cm, vim)\n            return\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm)\n          }\n        }\n        inputState.operator = command.operator\n        inputState.operatorArgs = copyArgs(command.operatorArgs)\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim)\n        }\n      },\n      processOperatorMotion: function (cm, vim, command) {\n        var visualMode = vim.visualMode\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs)\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true\n          }\n        }\n        this.processOperator(cm, vim, command)\n        if (!visualMode) {\n          this.processMotion(cm, vim, command)\n        }\n      },\n      processAction: function (cm, vim, command) {\n        var inputState = vim.inputState\n        var repeat = inputState.getRepeat()\n        var repeatIsExplicit = !!repeat\n        var actionArgs = copyArgs(command.actionArgs) || {}\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command)\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command)\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim)\n        }\n        actionArgs.repeat = repeat || 1\n        actionArgs.repeatIsExplicit = repeatIsExplicit\n        actionArgs.registerName = inputState.registerName\n        clearInputState(cm)\n        vim.lastMotion = null\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command)\n        }\n        actions[command.action](cm, actionArgs, vim)\n      },\n      processSearch: function (cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return\n        }\n        var forward = command.searchArgs.forward\n        var wholeWordOnly = command.searchArgs.wholeWordOnly\n        getSearchState(cm).setReversed(!forward)\n        var promptPrefix = (forward) ? '/' : '?'\n        var originalQuery = getSearchState(cm).getQuery()\n        var originalScrollPos = cm.getScrollInfo()\n        function handleQuery (query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query)\n          vimGlobalState.searchHistoryController.reset()\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase)\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query)\n            clearInputState(cm)\n            return\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          })\n        }\n        function onPromptClose (query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top)\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */)\n          var macroModeState = vimGlobalState.macroModeState\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query)\n          }\n        }\n        function onPromptKeyUp (e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up'\n            offset = e.target ? e.target.selectionEnd : 0\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || ''\n            close(query)\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length)\n          } else {\n            if (keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift') { vimGlobalState.searchHistoryController.reset() }\n          }\n          var parsedQuery\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */)\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30)\n          } else {\n            clearSearchHighlight(cm)\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top)\n          }\n        }\n        function onPromptKeyDown (e, query, close) {\n          var keyName = CodeMirror.keyName(e)\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query)\n            vimGlobalState.searchHistoryController.reset()\n            updateSearchQuery(cm, originalQuery)\n            clearSearchHighlight(cm)\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top)\n            CodeMirror.e_stop(e)\n            clearInputState(cm)\n            close()\n            cm.focus()\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e)\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e)\n            close('')\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift()\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */)\n            } else {\n              showPrompt(cm, {\n                onClose: onPromptClose,\n                prefix: promptPrefix,\n                desc: searchPromptDesc,\n                onKeyUp: onPromptKeyUp,\n                onKeyDown: onPromptKeyDown\n              })\n            }\n            break\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */)\n            var isKeyword = true\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */)\n              isKeyword = false\n            }\n            if (!word) {\n              return\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch)\n            if (isKeyword && wholeWordOnly) {\n              query = '\\\\b' + query + '\\\\b'\n            } else {\n              query = escapeRegex(query)\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor()\n            cm.setCursor(word.start)\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */)\n            break\n        }\n      },\n      processEx: function (cm, vim, command) {\n        function onPromptClose (input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input)\n          vimGlobalState.exCommandHistoryController.reset()\n          exCommandDispatcher.processCommand(cm, input)\n        }\n        function onPromptKeyDown (e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset\n          if (keyName === 'Esc' || keyName === 'Ctrl-C' || keyName === 'Ctrl-[' ||\n              (keyName === 'Backspace' && input === '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input)\n            vimGlobalState.exCommandHistoryController.reset()\n            CodeMirror.e_stop(e)\n            clearInputState(cm)\n            close()\n            cm.focus()\n          }\n          if (keyName === 'Up' || keyName === 'Down') {\n            CodeMirror.e_stop(e)\n            up = keyName === 'Up'\n            offset = e.target ? e.target.selectionEnd : 0\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || ''\n            close(input)\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length)\n          } else if (keyName === 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e)\n            close('')\n          } else {\n            if (keyName !== 'Left' && keyName !== 'Right' && keyName !== 'Ctrl' && keyName !== 'Alt' && keyName !== 'Shift') {\n              vimGlobalState.exCommandHistoryController.reset()\n            }\n          }\n        }\n        if (command.type === 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input)\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose,\n              prefix: ':',\n              value: '\\'<,\\'>',\n              onKeyDown: onPromptKeyDown})\n          } else {\n            showPrompt(cm, { onClose: onPromptClose,\n              prefix: ':',\n              onKeyDown: onPromptKeyDown})\n          }\n        }\n      },\n      evalInput: function (cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState\n        var motion = inputState.motion\n        var motionArgs = inputState.motionArgs || {}\n        var operator = inputState.operator\n        var operatorArgs = inputState.operatorArgs || {}\n        var registerName = inputState.registerName\n        var sel = vim.sel\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head) : cm.getCursor('head'))\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'))\n        var oldHead = copyCursor(origHead)\n        var oldAnchor = copyCursor(origAnchor)\n        var newHead, newAnchor\n        var repeat\n        if (operator) {\n          this.recordLastEdit(vim, inputState)\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride\n        } else {\n          repeat = inputState.getRepeat()\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1\n          motionArgs.repeatIsExplicit = false\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter\n        }\n        motionArgs.repeat = repeat\n        clearInputState(cm)\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim)\n          vim.lastMotion = motions[motion]\n          if (!motionResult) {\n            return\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult)\n              delete jumpList.cachedCursor\n            } else {\n              recordJumpPosition(cm, origHead, motionResult)\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0]\n            newHead = motionResult[1]\n          } else {\n            newHead = motionResult\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead)\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead, vim.visualBlock)\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor, true)\n            }\n            newAnchor = newAnchor || oldAnchor\n            sel.anchor = newAnchor\n            sel.head = newHead\n            updateCmSelection(cm)\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead)\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor)\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead)\n            cm.setCursor(newHead.line, newHead.ch)\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor\n            var lastSel = operatorArgs.lastSel\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line)\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch)\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch)\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset)\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset)\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch)\n            }\n            vim.visualMode = true\n            vim.visualLine = lastSel.visualLine\n            vim.visualBlock = lastSel.visualBlock\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            }\n            updateCmSelection(cm)\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            }\n          }\n          var curStart, curEnd, linewise, mode\n          var cmSel\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor)\n            curEnd = cursorMax(sel.head, sel.anchor)\n            linewise = vim.visualLine || operatorArgs.linewise\n            mode = vim.visualBlock ? 'block'\n                   : linewise ? 'line'\n                   : 'char'\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode)\n            if (linewise) {\n              var ranges = cmSel.ranges\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line)\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0)\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor)\n            curEnd = copyCursor(newHead || oldHead)\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart\n              curStart = curEnd\n              curEnd = tmp\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd)\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd)\n            }\n            mode = 'char'\n            var exclusive = !motionArgs.inclusive || linewise\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive)\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary)\n          vim.lastMotion = null\n          operatorArgs.repeat = repeat // For indent in visual mode.\n          operatorArgs.registerName = registerName\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead)\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null)\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo)\n          }\n        }\n      },\n      recordLastEdit: function (vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState\n        if (macroModeState.isPlaying) { return }\n        vim.lastEditInputState = inputState\n        vim.lastEditActionCommand = actionCommand\n        macroModeState.lastInsertModeChanges.changes = []\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false\n      }\n    }\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function (cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat - 1\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)))\n      },\n      moveToMiddleLine: function (cm) {\n        var range = getUserVisibleLines(cm)\n        var line = Math.floor((range.top + range.bottom) * 0.5)\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)))\n      },\n      moveToBottomLine: function (cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat + 1\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)))\n      },\n      expandToLine: function (_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity)\n      },\n      findNext: function (cm, _head, motionArgs) {\n        var state = getSearchState(cm)\n        var query = state.getQuery()\n        if (!query) {\n          return\n        }\n        var prev = !motionArgs.forward\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev\n        highlightSearchMatches(cm, query)\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat)\n      },\n      goToMark: function (cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter)\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos\n        }\n        return null\n      },\n      moveToOtherHighlightedEnd: function (cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ]\n        } else {\n          return ([vim.sel.head, vim.sel.anchor])\n        }\n      },\n      jumpToMark: function (cm, head, motionArgs, vim) {\n        var best = head\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue\n            }\n            var mark = vim.marks[key].find()\n            var isWrongDirection = (motionArgs.forward)\n              ? cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark)\n\n            if (isWrongDirection) {\n              continue\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue\n            }\n\n            var equal = cursorEqual(cursor, best)\n            var between = (motionArgs.forward)\n              ? cursorIsBetween(cursor, mark, best)\n              : cursorIsBetween(best, mark, cursor)\n\n            if (equal || between) {\n              best = mark\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)))\n        }\n        return best\n      },\n      moveByCharacters: function (_cm, head, motionArgs) {\n        var cur = head\n        var repeat = motionArgs.repeat\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat\n        return Pos(cur.line, ch)\n      },\n      moveByLines: function (cm, head, motionArgs, vim) {\n        var cur = head\n        var endCh = cur.ch\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos\n            break\n          default:\n            vim.lastHPos = endCh\n        }\n        var repeat = motionArgs.repeat + (motionArgs.repeatOffset || 0)\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat\n        var first = cm.firstLine()\n        var last = cm.lastLine()\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first) {\n          return this.moveToStartOfLine(cm, head, motionArgs, vim)\n        } else if (line > last && cur.line == last) {\n          return this.moveToEol(cm, head, motionArgs, vim)\n        }\n        if (motionArgs.toFirstChar) {\n          endCh = findFirstNonWhiteSpaceCharacter(cm.getLine(line))\n          vim.lastHPos = endCh\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh), 'div').left\n        return Pos(line, endCh)\n      },\n      moveByDisplayLines: function (cm, head, motionArgs, vim) {\n        var cur = head\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break\n          default:\n            vim.lastHSPos = cm.charCoords(cur, 'div').left\n        }\n        var repeat = motionArgs.repeat\n        var res = cm.findPosV(cur, (motionArgs.forward ? repeat : -repeat), 'line', vim.lastHSPos)\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div')\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos }\n            var res = cm.coordsChar(goalCoords, 'div')\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div')\n            resCoords.left = vim.lastHSPos\n            res = cm.coordsChar(resCoords, 'div')\n          }\n        }\n        vim.lastHPos = res.ch\n        return res\n      },\n      moveByPage: function (cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head\n        var repeat = motionArgs.repeat\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page')\n      },\n      moveByParagraph: function (cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1\n        return findParagraph(cm, head, motionArgs.repeat, dir)\n      },\n      moveByScroll: function (cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo()\n        var curEnd = null\n        var repeat = motionArgs.repeat\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight())\n        }\n        var orig = cm.charCoords(head, 'local')\n        motionArgs.repeat = repeat\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim)\n        if (!curEnd) {\n          return null\n        }\n        var dest = cm.charCoords(curEnd, 'local')\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top)\n        return curEnd\n      },\n      moveByWords: function (cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord)\n      },\n      moveTillCharacter: function (cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter)\n        var increment = motionArgs.forward ? -1 : 1\n        recordLastCharacterSearch(increment, motionArgs)\n        if (!curEnd) return null\n        curEnd.ch += increment\n        return curEnd\n      },\n      moveToCharacter: function (cm, head, motionArgs) {\n        var repeat = motionArgs.repeat\n        recordLastCharacterSearch(0, motionArgs)\n        logger.debug('moveToCharacter:', motionArgs)\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head\n      },\n      moveToSymbol: function (cm, head, motionArgs) {\n        var repeat = motionArgs.repeat\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head\n      },\n      moveToColumn: function (cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1\n        vim.lastHSPos = cm.charCoords(head, 'div').left\n        return moveToColumn(cm, repeat)\n      },\n      moveToEol: function (cm, head, motionArgs, vim) {\n        var cur = head\n        vim.lastHPos = Infinity\n        var retval = Pos(cur.line + motionArgs.repeat - 1, Infinity)\n        var end = cm.clipPos(retval)\n        end.ch--\n        vim.lastHSPos = cm.charCoords(end, 'div').left\n        return retval\n      },\n      moveToFirstNonWhiteSpaceCharacter: function (cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)))\n      },\n      moveToMatchedSymbol: function (cm, head) {\n        var cursor = head\n        var line = cursor.line\n        var ch = cursor.ch\n        var lineText = cm.getLine(line)\n        var symbol\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch)\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1))\n            if (style !== 'string' && style !== 'comment') {\n              break\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          var matched = cm.findMatchingBracket(Pos(line, ch))\n          return matched.to\n        } else {\n          return cursor\n        }\n      },\n      moveToStartOfLine: function (_cm, head) {\n        return Pos(head.line, 0)\n      },\n      moveToLineOrEdgeOfDocument: function (cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine()\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber')\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)))\n      },\n      textObjectManipulation: function (cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n\n        // TODO: adding <> >< to this map doesn't work, presumably because\n        // they're operators\n        var mirroredPairs = {'(': ')',\n          ')': '(',\n          '{': '}',\n          '}': '{',\n          '[': ']',\n          ']': '['}\n        var selfPaired = {'\\'': true, '\"': true}\n\n        var character = motionArgs.selectedCharacter\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '('\n        } else if (character == 'B') {\n          character = '{'\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner\n\n        var tmp\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive)\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive)\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */)\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */)\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive)\n          motionArgs.linewise = true\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs\n            if (operatorArgs) { operatorArgs.linewise = true }\n            tmp.end.line--\n          }\n        } else {\n          // No text object defined for this, don't move.\n          return null\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end]\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end)\n        }\n      },\n\n      repeatLastCharacterSearch: function (cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch\n        var repeat = motionArgs.repeat\n        var forward = motionArgs.forward === lastSearch.forward\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1)\n        cm.moveH(-increment, 'char')\n        motionArgs.inclusive = !!forward\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter)\n        if (!curEnd) {\n          cm.moveH(increment, 'char')\n          return head\n        }\n        curEnd.ch += increment\n        return curEnd\n      }\n    }\n\n    function defineMotion (name, fn) {\n      motions[name] = fn\n    }\n\n    function fillArray (val, times) {\n      var arr = []\n      for (var i = 0; i < times; i++) {\n        arr.push(val)\n      }\n      return arr\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function (cm, args, ranges) {\n        var finalHead, text\n        var vim = cm.state.vim\n        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock = vim.visualBlock\n        if (!vim.visualMode) {\n          var anchor = ranges[0].anchor,\n            head = ranges[0].head\n          text = cm.getRange(anchor, head)\n          var lastState = vim.lastEditInputState || {}\n          if (lastState.motion == 'moveByWords' && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text)\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, -match[0].length)\n              text = text.slice(0, -match[0].length)\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE)\n          var wasLastLine = cm.firstLine() == cm.lastLine()\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head)\n          } else {\n            cm.replaceRange('', anchor, head)\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd)\n              CodeMirror.commands.newlineAndIndent(cm)\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE\n          }\n          finalHead = anchor\n        } else {\n          text = cm.getSelection()\n          var replacement = fillArray('', ranges.length)\n          cm.replaceSelections(replacement)\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor)\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1)\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim)\n      },\n      // delete is a javascript keyword.\n      'delete': function (cm, args, ranges) {\n        var finalHead, text\n        var vim = cm.state.vim\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n            head = ranges[0].head\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1))\n            }\n          }\n          text = cm.getRange(anchor, head)\n          cm.replaceRange('', anchor, head)\n          finalHead = anchor\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor)\n          }\n        } else {\n          text = cm.getSelection()\n          var replacement = fillArray('', ranges.length)\n          cm.replaceSelections(replacement)\n          finalHead = ranges[0].anchor\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock)\n        var includeLineBreak = vim.insertMode\n        return clipCursorToContent(cm, finalHead, includeLineBreak)\n      },\n      indent: function (cm, args, ranges) {\n        var vim = cm.state.vim\n        var startLine = ranges[0].anchor.line\n        var endLine = vim.visualBlock\n          ? ranges[ranges.length - 1].anchor.line\n          : ranges[0].head.line\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight)\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor)\n      },\n      changeCase: function (cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections()\n        var swapped = []\n        var toLower = args.toLower\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j]\n          var text = ''\n          if (toLower === true) {\n            text = toSwap.toLowerCase()\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase()\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i)\n              text += isUpperCase(character) ? character.toLowerCase()\n                  : character.toUpperCase()\n            }\n          }\n          swapped.push(text)\n        }\n        cm.replaceSelections(swapped)\n        if (args.shouldMoveCursor) {\n          return newHead\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor)\n        } else if (args.linewise) {\n          return oldAnchor\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head)\n        }\n      },\n      yank: function (cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim\n        var text = cm.getSelection()\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock)\n        return endPos\n      }\n    }\n\n    function defineOperator (name, fn) {\n      operators[name] = fn\n    }\n\n    var actions = {\n      jumpListWalk: function (cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return\n        }\n        var repeat = actionArgs.repeat\n        var forward = actionArgs.forward\n        var jumpList = vimGlobalState.jumpList\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat)\n        var markPos = mark ? mark.find() : undefined\n        markPos = markPos || cm.getCursor()\n        cm.setCursor(markPos)\n      },\n      scroll: function (cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return\n        }\n        var repeat = actionArgs.repeat || 1\n        var lineHeight = cm.defaultTextHeight()\n        var top = cm.getScrollInfo().top\n        var delta = lineHeight * repeat\n        var newPos = actionArgs.forward ? top + delta : top - delta\n        var cursor = copyCursor(cm.getCursor())\n        var cursorCoords = cm.charCoords(cursor, 'local')\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n            cursor.line += (newPos - cursorCoords.top) / lineHeight\n            cursor.line = Math.ceil(cursor.line)\n            cm.setCursor(cursor)\n            cursorCoords = cm.charCoords(cursor, 'local')\n            cm.scrollTo(null, cursorCoords.top)\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos)\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight\n          if (newBottom < cursorCoords.bottom) {\n            cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight\n            cursor.line = Math.floor(cursor.line)\n            cm.setCursor(cursor)\n            cursorCoords = cm.charCoords(cursor, 'local')\n            cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight)\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos)\n          }\n        }\n      },\n      scrollToCursor: function (cm, actionArgs) {\n        var lineNum = cm.getCursor().line\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local')\n        var height = cm.getScrollInfo().clientHeight\n        var y = charCoords.top\n        var lineHeight = charCoords.bottom - y\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight\n            break\n          case 'bottom': y = y - height + lineHeight\n            break\n        }\n        cm.scrollTo(null, y)\n      },\n      replayMacro: function (cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter\n        var repeat = actionArgs.repeat\n        var macroModeState = vimGlobalState.macroModeState\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister\n        }\n        while (repeat--) {\n          executeMacroRegister(cm, vim, macroModeState, registerName)\n        }\n      },\n      enterMacroRecordMode: function (cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState\n        var registerName = actionArgs.selectedCharacter\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName)\n        }\n      },\n      toggleOverwrite: function (cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true)\n          cm.setOption('keyMap', 'vim-replace')\n          CodeMirror.signal(cm, 'vim-mode-change', {mode: 'replace'})\n        } else {\n          cm.toggleOverwrite(false)\n          cm.setOption('keyMap', 'vim-insert')\n          CodeMirror.signal(cm, 'vim-mode-change', {mode: 'insert'})\n        }\n      },\n      enterInsertMode: function (cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return }\n        cm.getWrapperElement().classList.add('insert-mode')\n        cm.getWrapperElement().classList.remove('visual-mode')\n        cm.getWrapperElement().classList.remove('normal-mode')\n        vim.insertMode = true\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null\n        var sel = vim.sel\n        var head = actionArgs.head || cm.getCursor('head')\n        var height = cm.listSelections().length\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line))\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1)\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head)\n        } else if (insertAt == 'startOfSelectedArea') {\n          logger.debug('startOfSelectedArea:', vim.visualBlock)\n          logger.debug('sel:', JSON.stringify(sel, null, 2))\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head\n            } else {\n              head = Pos(sel.anchor.line, 0)\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch))\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1)\n            } else {\n              head = Pos(sel.anchor.line, 0)\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch))\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode) {\n            return\n          }\n        }\n        cm.setOption('disableInput', false)\n        if (vim.visualMode) {\n          exitVisualMode(cm)\n        }\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true)\n          cm.setOption('keyMap', 'vim-replace')\n          CodeMirror.signal(cm, 'vim-mode-change', {mode: 'replace'})\n        } else {\n          cm.toggleOverwrite(false)\n          cm.setOption('keyMap', 'vim-insert')\n          CodeMirror.signal(cm, 'vim-mode-change', {mode: 'insert'})\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange)\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown)\n        }\n        selectForInsert(cm, head, height)\n      },\n      toggleVisualMode: function (cm, actionArgs, vim) {\n        logger.debug('toggleVisualMode', actionArgs)\n        var repeat = actionArgs.repeat\n        var anchor = cm.getCursor()\n        var head\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true\n          vim.visualLine = !!actionArgs.linewise\n          vim.visualBlock = !!actionArgs.blockwise\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1),\n              true /** includeLineBreak */)\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          }\n          CodeMirror.signal(cm, 'vim-mode-change', {mode: 'visual', subMode: vim.visualLine ? 'linewise' : vim.visualBlock ? 'blockwise' : ''})\n          updateCmSelection(cm)\n          updateMark(cm, vim, '<', cursorMin(anchor, head))\n          updateMark(cm, vim, '>', cursorMax(anchor, head))\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise\n          vim.visualBlock = !!actionArgs.blockwise\n          CodeMirror.signal(cm, 'vim-mode-change', {mode: 'visual', subMode: vim.visualLine ? 'linewise' : vim.visualBlock ? 'blockwise' : ''})\n          updateCmSelection(cm)\n        } else {\n          exitVisualMode(cm)\n        }\n      },\n      reselectLastSelection: function (cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim)\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find()\n          var head = lastSelection.headMark.find()\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          }\n          vim.visualMode = true\n          vim.visualLine = lastSelection.visualLine\n          vim.visualBlock = lastSelection.visualBlock\n          updateCmSelection(cm)\n          updateMark(cm, vim, '<', cursorMin(anchor, head))\n          updateMark(cm, vim, '>', cursorMax(anchor, head))\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise'\n                     : vim.visualBlock ? 'blockwise' : ''})\n        }\n      },\n      joinLines: function (cm, actionArgs, vim) {\n        var curStart, curEnd\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor')\n          curEnd = cm.getCursor('head')\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd\n            curEnd = curStart\n            curStart = tmp\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2)\n          curStart = cm.getCursor()\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity))\n        }\n        var finalCh = 0\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line)\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1))\n          var text = cm.getRange(curStart, tmp)\n          text = text.replace(/\\n\\s*/g, ' ')\n          cm.replaceRange(text, curStart, tmp)\n        }\n        var curFinalPos = Pos(curStart.line, finalCh)\n        if (vim.visualMode) {\n          exitVisualMode(cm, false)\n        }\n        cm.setCursor(curFinalPos)\n      },\n      newLineAndEnterInsertMode: function (cm, actionArgs, vim) {\n        vim.insertMode = true\n        var insertAt = copyCursor(cm.getCursor())\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0))\n          cm.setCursor(cm.firstLine(), 0)\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line\n              : insertAt.line - 1\n          insertAt.ch = lineLength(cm, insertAt.line)\n          cm.setCursor(insertAt)\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent\n          newlineFn(cm)\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim)\n      },\n      paste: function (cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor())\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName)\n        var text = register.toString()\n        if (!text) {\n          return\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption('tabSize')\n          // length that considers tabs and tabSize\n          var whitespaceLength = function (str) {\n            var tabs = (str.split('\\t').length - 1)\n            var spaces = (str.split(' ').length - 1)\n            return tabs * tabSize + spaces * 1\n          }\n          var currentLine = cm.getLine(cm.getCursor().line)\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0])\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '')\n          var wasChomped = text !== chompedText\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0])\n          var text = chompedText.replace(/^\\s*/gm, function (wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent)\n            if (newIndent < 0) {\n              return ''\n            } else if (cm.getOption('indentWithTabs')) {\n              var quotient = Math.floor(newIndent / tabSize)\n              return Array(quotient + 1).join('\\t')\n            } else {\n              return Array(newIndent + 1).join(' ')\n            }\n          })\n          text += wasChomped ? '\\n' : ''\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text)\n        }\n        var linewise = register.linewise\n        var blockwise = register.blockwise\n        if (linewise) {\n          if (vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n'\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1)\n            cur.ch = lineLength(cm, cur.line)\n          } else {\n            cur.ch = 0\n          }\n        } else {\n          if (blockwise) {\n            text = text.split('\\n')\n            for (var i = 0; i < text.length; i++) {\n              text[i] = (text[i] == '') ? ' ' : text[i]\n            }\n          }\n          cur.ch += actionArgs.after ? 1 : 0\n        }\n        var curPosFinal\n        var idx\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text\n          var lastSelectionCurEnd\n          var selectedArea = getSelectedAreaRange(cm, vim)\n          var selectionStart = selectedArea[0]\n          var selectionEnd = selectedArea[1]\n          var selectedText = cm.getSelection()\n          var selections = cm.listSelections()\n          var emptyStrings = new Array(selections.length).join('1').split('1')\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find()\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText)\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings)\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length - 1, selectionStart.ch)\n            cm.setCursor(selectionStart)\n            selectBlock(cm, selectionEnd)\n            cm.replaceSelections(text)\n            curPosFinal = selectionStart\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings)\n            cm.setCursor(selectionStart)\n            cm.replaceRange(text, selectionStart, selectionStart)\n            curPosFinal = selectionStart\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd)\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1)\n          }\n          // restore the the curEnd marker\n          if (lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd)\n          }\n          if (linewise) {\n            curPosFinal.ch = 0\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur)\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line + i\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n', Pos(line, 0))\n              }\n              var lastCh = lineLength(cm, line)\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch)\n              }\n            }\n            cm.setCursor(cur)\n            selectBlock(cm, Pos(cur.line + text.length - 1, cur.ch))\n            cm.replaceSelections(text)\n            curPosFinal = cur\n          } else {\n            cm.replaceRange(text, cur)\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)))\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)))\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur)\n              curPosFinal = cm.posFromIndex(idx + text.length - 1)\n            } else {\n              idx = cm.indexFromPos(cur)\n              curPosFinal = cm.posFromIndex(idx + text.length)\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false)\n        }\n        cm.setCursor(curPosFinal)\n      },\n      undo: function (cm, actionArgs) {\n        cm.operation(function () {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)()\n          cm.setCursor(cm.getCursor('anchor'))\n        })\n      },\n      redo: function (cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)()\n      },\n      setRegister: function (_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter\n      },\n      setMark: function (cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter\n        updateMark(cm, vim, markName, cm.getCursor())\n      },\n      replace: function (cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter\n        var curStart = cm.getCursor()\n        var replaceTo\n        var curEnd\n        var selections = cm.listSelections()\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start')\n          curEnd = cm.getCursor('end')\n        } else {\n          var line = cm.getLine(curStart.line)\n          replaceTo = curStart.ch + actionArgs.repeat\n          if (replaceTo > line.length) {\n            replaceTo = line.length\n          }\n          curEnd = Pos(curStart.line, replaceTo)\n        }\n        if (replaceWith == '\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm)\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd)\n          // replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith)\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption('tabSize') + 1).join(' ')\n            replaceWithStr = cm.getSelection()\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n')\n            cm.replaceSelections(replaceWithStr)\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd)\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head)\n                         ? selections[0].anchor : selections[0].head\n            cm.setCursor(curStart)\n            exitVisualMode(cm, false)\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1))\n          }\n        }\n      },\n      incrementNumberToken: function (cm, actionArgs) {\n        var cur = cm.getCursor()\n        var lineStr = cm.getLine(cur.line)\n        var re = /-?\\d+/g\n        var match\n        var start\n        var end\n        var numberStr\n        var token\n        while ((match = re.exec(lineStr)) !== null) {\n          token = match[0]\n          start = match.index\n          end = start + token.length\n          if (cur.ch < end) break\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch)) return\n        if (token) {\n          var increment = actionArgs.increase ? 1 : -1\n          var number = parseInt(token) + (increment * actionArgs.repeat)\n          var from = Pos(cur.line, start)\n          var to = Pos(cur.line, end)\n          numberStr = number.toString()\n          cm.replaceRange(numberStr, from, to)\n        } else {\n          return\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1))\n      },\n      repeatLastEdit: function (cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState\n        if (!lastEditInputState) { return }\n        var repeat = actionArgs.repeat\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */)\n      },\n      indent: function (cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight)\n      },\n      exitInsertMode: exitInsertMode\n    }\n\n    function defineAction (name, fn) {\n      actions[name] = fn\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent (cm, cur, includeLineBreak) {\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine())\n      var maxCh = lineLength(cm, line) - 1\n      maxCh = (includeLineBreak) ? maxCh + 1 : maxCh\n      var ch = Math.min(Math.max(0, cur.ch), maxCh)\n      return Pos(line, ch)\n    }\n    function copyArgs (args) {\n      var ret = {}\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop]\n        }\n      }\n      return ret\n    }\n    function offsetCursor (cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch\n        offsetLine = offsetLine.line\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh)\n    }\n    function getOffset (anchor, head) {\n      return {\n        line: head.line - anchor.line,\n        ch: head.line - anchor.line\n      }\n    }\n    function commandMatches (keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = []\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i]\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue }\n        if (match == 'partial') { partial.push(command) }\n        if (match == 'full') { full.push(command) }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      }\n    }\n    function commandMatch (pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11\n        var pressedPrefix = pressed.slice(0, prefixLen)\n        var mappedPrefix = mapped.slice(0, prefixLen)\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full'\n               : mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false\n      } else {\n        return pressed == mapped ? 'full'\n               : mapped.indexOf(pressed) == 0 ? 'partial' : false\n      }\n    }\n    function lastChar (keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys)\n      var selectedCharacter = match ? match[1] : keys.slice(-1)\n      if (selectedCharacter.length > 1) {\n        switch (selectedCharacter) {\n          case '<CR>':\n            selectedCharacter = '\\n'\n            break\n          case '<Space>':\n            selectedCharacter = ' '\n            break\n          default:\n            selectedCharacter = ''\n            break\n        }\n      }\n      return selectedCharacter\n    }\n    function repeatFn (cm, fn, repeat) {\n      return function () {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm)\n        }\n      }\n    }\n    function copyCursor (cur) {\n      return Pos(cur.line, cur.ch)\n    }\n    function cursorEqual (cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line\n    }\n    function cursorIsBefore (cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true\n      }\n      return false\n    }\n    function cursorMin (cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1))\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2\n    }\n    function cursorMax (cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1))\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1\n    }\n    function cursorIsBetween (cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2)\n      var cur2before3 = cursorIsBefore(cur2, cur3)\n      return cur1before2 && cur2before3\n    }\n    function lineLength (cm, lineNum) {\n      return cm.getLine(lineNum).length\n    }\n    function trim (s) {\n      if (s.trim) {\n        return s.trim()\n      }\n      return s.replace(/^\\s+|\\s+$/g, '')\n    }\n    function escapeRegex (s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1')\n    }\n    function extendLineToColumn (cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum)\n      var spaces = new Array(column - endCh + 1).join(' ')\n      cm.setCursor(Pos(lineNum, endCh))\n      cm.replaceRange(spaces, cm.getCursor())\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock (cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections()\n      var head = copyCursor(cm.clipPos(selectionEnd))\n      var isClipped = !cursorEqual(selectionEnd, head)\n      var curHead = cm.getCursor('head')\n      var primIndex = getIndex(ranges, curHead)\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor)\n      var max = ranges.length - 1\n      var index = max - primIndex > primIndex ? max : 0\n      var base = ranges[index].anchor\n\n      var firstLine = Math.min(base.line, head.line)\n      var lastLine = Math.max(base.line, head.line)\n      var baseCh = base.ch, headCh = head.ch\n\n      var dir = ranges[index].head.ch - baseCh\n      var newDir = headCh - baseCh\n      if (dir > 0 && newDir <= 0) {\n        baseCh++\n        if (!isClipped) { headCh-- }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--\n        if (!wasClipped) { headCh++ }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--\n        headCh++\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)}\n        selections.push(range)\n      }\n      cm.setSelections(selections)\n      selectionEnd.ch = headCh\n      base.ch = baseCh\n      return base\n    }\n    function selectForInsert (cm, head, height) {\n      var sel = []\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0)\n        sel.push({anchor: lineHead, head: lineHead})\n      }\n      cm.setSelections(sel, 0)\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex (ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor)\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor)\n        if (atAnchor || atHead) {\n          return i\n        }\n      }\n      return -1\n    }\n    function getSelectedAreaRange (cm, vim) {\n      var lastSelection = vim.lastSelection\n      var getCurrentSelectedAreaRange = function () {\n        var selections = cm.listSelections()\n        var start = selections[0]\n        var end = selections[selections.length - 1]\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor\n        return [selectionStart, selectionEnd]\n      }\n      var getLastSelectedAreaRange = function () {\n        var selectionStart = cm.getCursor()\n        var selectionEnd = cm.getCursor()\n        var block = lastSelection.visualBlock\n        if (block) {\n          var width = block.width\n          var height = block.height\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width)\n          var selections = []\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch)\n            var head = Pos(i, selectionEnd.ch)\n            var range = {anchor: anchor, head: head}\n            selections.push(range)\n          }\n          cm.setSelections(selections)\n        } else {\n          var start = lastSelection.anchorMark.find()\n          var end = lastSelection.headMark.find()\n          var line = end.line - start.line\n          var ch = end.ch - start.ch\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch}\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0)\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line))\n          }\n          cm.setSelection(selectionStart, selectionEnd)\n        }\n        return [selectionStart, selectionEnd]\n      }\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange()\n      } else {\n        return getCurrentSelectedAreaRange()\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection (cm, vim) {\n      var anchor = vim.sel.anchor\n      var head = vim.sel.head\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length)\n        vim.lastPastedText = null\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n        'headMark': cm.setBookmark(head),\n        'anchor': copyCursor(anchor),\n        'head': copyCursor(head),\n        'visualMode': vim.visualMode,\n        'visualLine': vim.visualLine,\n        'visualBlock': vim.visualBlock}\n    }\n    function expandSelection (cm, start, end) {\n      var sel = cm.state.vim.sel\n      var head = sel.head\n      var anchor = sel.anchor\n      var tmp\n      if (cursorIsBefore(end, start)) {\n        tmp = end\n        end = start\n        start = tmp\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head)\n        anchor = cursorMax(anchor, end)\n      } else {\n        anchor = cursorMin(start, anchor)\n        head = cursorMax(head, end)\n        head = offsetCursor(head, 0, -1)\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1))\n        }\n      }\n      return [anchor, head]\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection (cm, sel, mode) {\n      var vim = cm.state.vim\n      sel = sel || vim.sel\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char'\n      var cmSel = makeCmSelection(cm, sel, mode)\n      cm.setSelections(cmSel.ranges, cmSel.primary)\n      updateFakeCursor(cm)\n    }\n    function makeCmSelection (cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head)\n      var anchor = copyCursor(sel.anchor)\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0\n        head = offsetCursor(sel.head, 0, headOffset)\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset)\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        }\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0\n\n          var lastLine = cm.lastLine()\n          if (head.line > lastLine) {\n            head.line = lastLine\n          }\n          head.ch = lineLength(cm, head.line)\n        } else {\n          head.ch = 0\n          anchor.ch = lineLength(cm, anchor.line)\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        }\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n          left = Math.min(anchor.ch, head.ch),\n          bottom = Math.max(anchor.line, head.line),\n          right = Math.max(anchor.ch, head.ch) + 1\n        var height = bottom - top + 1\n        var primary = head.line == top ? 0 : height - 1\n        var ranges = []\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          })\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        }\n      }\n    }\n    function getHead (cm) {\n      var cur = cm.getCursor('head')\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'))\n      }\n      return cur\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode (cm, moveHead) {\n      var vim = cm.state.vim\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head))\n      }\n      updateLastSelection(cm, vim)\n      vim.visualMode = false\n      vim.visualLine = false\n      vim.visualBlock = false\n      CodeMirror.signal(cm, 'vim-mode-change', {mode: 'normal'})\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear()\n      }\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine (cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd)\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n')\n        // We know this is all whitespace.\n        lines.pop()\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--\n          curEnd.ch = 0\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--\n          curEnd.ch = lineLength(cm, curEnd.line)\n        } else {\n          curEnd.ch = 0\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine (_cm, curStart, curEnd) {\n      curStart.ch = 0\n      curEnd.ch = 0\n      curEnd.line++\n    }\n\n    function findFirstNonWhiteSpaceCharacter (text) {\n      if (!text) {\n        return 0\n      }\n      var firstNonWS = text.search(/\\S/)\n      return firstNonWS == -1 ? text.length : firstNonWS\n    }\n\n    function expandWordUnderCursor (cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm)\n      var line = cm.getLine(cur.line)\n      var idx = cur.ch\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest[0]\n      while (!test(line.charAt(idx))) {\n        idx++\n        if (idx >= line.length) { return null }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0]\n      } else {\n        test = wordCharTest[0]\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1]\n        }\n      }\n\n      var end = idx, start = idx\n      while (test(line.charAt(end)) && end < line.length) { end++ }\n      while (test(line.charAt(start)) && start >= 0) { start-- }\n      start++\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++ }\n        if (wordEnd == end) {\n          var wordStart = start\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start-- }\n          if (!start) { start = wordStart }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) }\n    }\n\n    function recordJumpPosition (cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur)\n      }\n    }\n\n    function recordLastCharacterSearch (increment, args) {\n      vimGlobalState.lastCharacterSearch.increment = increment\n      vimGlobalState.lastCharacterSearch.forward = args.forward\n      vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter\n    }\n\n    var symbolToMode = {\n      '(': 'bracket',\n      ')': 'bracket',\n      '{': 'bracket',\n      '}': 'bracket',\n      '[': 'section',\n      ']': 'section',\n      '*': 'comment',\n      '/': 'comment',\n      'm': 'method',\n      'M': 'method',\n      '#': 'preprocess'\n    }\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function (state) {\n          if (state.nextCh === state.symb) {\n            state.depth++\n            if (state.depth >= 1) return true\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--\n          }\n          return false\n        }\n      },\n      section: {\n        init: function (state) {\n          state.curMoveThrough = true\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}'\n        },\n        isComplete: function (state) {\n          return state.index === 0 && state.nextCh === state.symb\n        }\n      },\n      comment: {\n        isComplete: function (state) {\n          var found = state.lastCh === '*' && state.nextCh === '/'\n          state.lastCh = state.nextCh\n          return found\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function (state) {\n          state.symb = (state.symb === 'm' ? '{' : '}')\n          state.reverseSymb = state.symb === '{' ? '}' : '{'\n        },\n        isComplete: function (state) {\n          if (state.nextCh === state.symb) return true\n          return false\n        }\n      },\n      preprocess: {\n        init: function (state) {\n          state.index = 0\n        },\n        isComplete: function (state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1]\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true\n              }\n              state.depth++\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true\n              }\n              state.depth--\n            }\n            if (token === 'else' && state.depth === 0) return true\n          }\n          return false\n        }\n      }\n    }\n    function findSymbol (cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor())\n      var increment = forward ? 1 : -1\n      var endLine = forward ? cm.lineCount() : -1\n      var curCh = cur.ch\n      var line = cur.line\n      var lineText = cm.getLine(line)\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ? { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      }\n      var mode = symbolToMode[symb]\n      if (!mode) return cur\n      var init = findSymbolModes[mode].init\n      var isComplete = findSymbolModes[mode].isComplete\n      if (init) { init(state) }\n      while (line !== endLine && repeat) {\n        state.index += increment\n        state.nextCh = state.lineText.charAt(state.index)\n        if (!state.nextCh) {\n          line += increment\n          state.lineText = cm.getLine(line) || ''\n          if (increment > 0) {\n            state.index = 0\n          } else {\n            var lineLen = state.lineText.length\n            state.index = (lineLen > 0) ? (lineLen - 1) : 0\n          }\n          state.nextCh = state.lineText.charAt(state.index)\n        }\n        if (isComplete(state)) {\n          cur.line = line\n          cur.ch = state.index\n          repeat--\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index)\n      }\n      return cur\n    }\n\n    /**\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord (cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line\n      var pos = cur.ch\n      var line = cm.getLine(lineNum)\n      var dir = forward ? 1 : -1\n      var charTests = bigWord ? bigWordCharTest : wordCharTest\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir\n        line = cm.getLine(lineNum)\n        if (!isLine(cm, lineNum)) {\n          return null\n        }\n        pos = (forward) ? 0 : line.length\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum }\n        }\n        var stop = (dir > 0) ? line.length : -1\n        var wordStart = stop, wordEnd = stop\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir\n              }\n              wordEnd = pos\n              foundWord = wordStart != wordEnd\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum }\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir\n        if (!isLine(cm, lineNum)) {\n          return null\n        }\n        line = cm.getLine(lineNum)\n        pos = (dir > 0) ? 0 : line.length\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord (cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur)\n      var words = []\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd)\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord)\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine())\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0})\n          break\n        }\n        words.push(word)\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from)\n      }\n      var shortCircuit = words.length != repeat\n      var firstWord = words[0]\n      var lastWord = words.pop()\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop()\n        }\n        return Pos(lastWord.line, lastWord.from)\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1)\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop()\n        }\n        return Pos(lastWord.line, lastWord.to)\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from)\n      }\n    }\n\n    function moveToCharacter (cm, repeat, forward, character) {\n      var cur = cm.getCursor()\n      var start = cur.ch\n      var idx\n      for (var i = 0; i < repeat; i++) {\n        var line = cm.getLine(cur.line)\n        idx = charIdxInLine(start, line, character, forward, true)\n        if (idx == -1) {\n          return null\n        }\n        start = idx\n      }\n      return Pos(cm.getCursor().line, idx)\n    }\n\n    function moveToColumn (cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line\n      return clipCursorToContent(cm, Pos(line, repeat - 1))\n    }\n\n    function updateMark (cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear()\n      }\n      vim.marks[markName] = cm.setBookmark(pos)\n    }\n\n    function charIdxInLine (start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx\n      if (forward) {\n        idx = line.indexOf(character, start + 1)\n        if (idx != -1 && !includeChar) {\n          idx -= 1\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1)\n        if (idx != -1 && !includeChar) {\n          idx += 1\n        }\n      }\n      return idx\n    }\n\n    function findParagraph (cm, head, repeat, dir, inclusive) {\n      var line = head.line\n      var min = cm.firstLine()\n      var max = cm.lastLine()\n      var start, end, i = line\n      function isEmpty (i) { return !cm.getLine(i) }\n      function isBoundary (i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir) }\n        return !isEmpty(i) && isEmpty(i + dir)\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat-- }\n          i += dir\n        }\n        return new Pos(i, 0)\n      }\n\n      var vim = cm.state.vim\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1\n          }\n        }\n      }\n      var startState = isEmpty(line)\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--\n          }\n        }\n      }\n      end = new Pos(i, 0)\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true } else { inclusive = false }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break }\n        }\n      }\n      start = new Pos(i, 0)\n      return { start: start, end: end }\n    }\n\n    // TODO: perhaps this finagling of start and end positions belonds\n    // in codemirror/replaceRange?\n    function selectCompanionObject (cm, head, symb, inclusive) {\n      var cur = head, start, end\n\n      var bracketRegexp = ({\n        '(': /[()]/,\n        ')': /[()]/,\n        '[': /[[\\]]/,\n        ']': /[[\\]]/,\n        '{': /[{}]/,\n        '}': /[{}]/})[symb]\n      var openSym = ({\n        '(': '(',\n        ')': '(',\n        '[': '[',\n        ']': '[',\n        '{': '{',\n        '}': '{'})[symb]\n      var curChar = cm.getLine(cur.line).charAt(cur.ch)\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp})\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp})\n\n      if (!start || !end) {\n        return { start: cur, end: cur }\n      }\n\n      start = start.pos\n      end = end.pos\n\n      if ((start.line == end.line && start.ch > end.ch) ||\n          (start.line > end.line)) {\n        var tmp = start\n        start = end\n        end = tmp\n      }\n\n      if (inclusive) {\n        end.ch += 1\n      } else {\n        start.ch += 1\n      }\n\n      return { start: start, end: end }\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd (cm, head, symb, inclusive) {\n      var cur = copyCursor(head)\n      var line = cm.getLine(cur.line)\n      var chars = line.split('')\n      var start, end, i, len\n      var firstIndex = chars.indexOf(symb)\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch // assign end to the current cursor\n        --cur.ch // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1 // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur }\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      }\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean')\n    function SearchState () {}\n    SearchState.prototype = {\n      getQuery: function () {\n        return vimGlobalState.query\n      },\n      setQuery: function (query) {\n        vimGlobalState.query = query\n      },\n      getOverlay: function () {\n        return this.searchOverlay\n      },\n      setOverlay: function (overlay) {\n        this.searchOverlay = overlay\n      },\n      isReversed: function () {\n        return vimGlobalState.isReversed\n      },\n      setReversed: function (reversed) {\n        vimGlobalState.isReversed = reversed\n      },\n      getScrollbarAnnotate: function () {\n        return this.annotate\n      },\n      setScrollbarAnnotate: function (annotate) {\n        this.annotate = annotate\n      }\n    }\n    function getSearchState (cm) {\n      var vim = cm.state.vim\n      return vim.searchState_ || (vim.searchState_ = new SearchState())\n    }\n    function dialog (cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, { bottom: true,\n          value: options.value,\n          onKeyDown: options.onKeyDown,\n          onKeyUp: options.onKeyUp,\n          selectValueOnOpen: false})\n      } else {\n        onClose(prompt(shortText, ''))\n      }\n    }\n    function splitBySlash (argString) {\n      var slashes = findUnescapedSlashes(argString) || []\n      if (!slashes.length) return []\n      var tokens = []\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] === 'number') { tokens.push(argString.substring(slashes[i] + 1, slashes[i + 1])) }\n      }\n      return tokens\n    }\n\n    function findUnescapedSlashes (str) {\n      var escapeNextChar = false\n      var slashes = []\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i)\n        if (!escapeNextChar && c == '/') {\n          slashes.push(i)\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\')\n      }\n      return slashes\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex (str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){'\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}'\n      var escapeNextChar = false\n      var out = []\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || ''\n        var n = str.charAt(i + 1) || ''\n        var specialComesNext = (n && specials.indexOf(n) != -1)\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c)\n          }\n          escapeNextChar = false\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c)\n            }\n          } else {\n            out.push(c)\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\')\n            }\n          }\n        }\n      }\n      return out.join('')\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'}\n    function translateRegexReplace (str) {\n      var escapeNextChar = false\n      var out = []\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || ''\n        var n = str.charAt(i + 1) || ''\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c + n])\n          i++\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c)\n          escapeNextChar = false\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true\n            if ((isNumber(n) || n === '$')) {\n              out.push('$')\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\')\n            }\n          } else {\n            if (c === '$') {\n              out.push('$')\n            }\n            out.push(c)\n            if (n === '/') {\n              out.push('\\\\')\n            }\n          }\n        }\n      }\n      return out.join('')\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'}\n    function unescapeRegexReplace (str) {\n      var stream = new CodeMirror.StringStream(str)\n      var output = []\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next())\n        }\n        var matched = false\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true\n            output.push(unescapes[matcher])\n            break\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next())\n        }\n      }\n      return output.join('')\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery (query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/')\n      lastSearchRegister.setText(query)\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query)\n      var regexPart\n      var forceIgnoreCase\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0])\n        var flagsPart = query.substring(slashes[0])\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1)\n      }\n      if (!regexPart) {\n        return null\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart)\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart)\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined)\n      return regexp\n    }\n    function showConfirm (cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>',\n                            {bottom: true, duration: 5000})\n      } else {\n        alert(text)\n      }\n    }\n    function makePrompt (prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' +\n          (prefix || '') + '<input type=\"text\"></span>'\n      if (desc) { raw += ' <span style=\"color: #888\">' + desc + '</span>' }\n      return raw\n    }\n    var searchPromptDesc = '(Javascript regexp)'\n    function showPrompt (cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '')\n      var prompt = makePrompt(options.prefix, options.desc)\n      dialog(cm, prompt, shortText, options.onClose, options)\n    }\n    function regexEqual (r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n        var props = ['global', 'multiline', 'ignoreCase', 'source']\n        for (var i = 0; i < props.length; i++) {\n          var prop = props[i]\n          if (r1[prop] !== r2[prop]) {\n            return false\n          }\n        }\n        return true\n      }\n      return false\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery (cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return\n      }\n      var state = getSearchState(cm)\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase)\n      if (!query) {\n        return\n      }\n      highlightSearchMatches(cm, query)\n      if (regexEqual(query, state.getQuery())) {\n        return query\n      }\n      state.setQuery(query)\n      return query\n    }\n    function searchOverlay (query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true\n      }\n      return {\n        token: function (stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd()\n            return\n          }\n          var match = stream.match(query, false)\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next()\n              return 'searching'\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1)\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next()\n                return null\n              }\n            }\n            stream.match(query)\n            return 'searching'\n          }\n          while (!stream.eol()) {\n            stream.next()\n            if (stream.match(query, false)) break\n          }\n        },\n        query: query\n      }\n    }\n    function highlightSearchMatches (cm, query) {\n      var searchState = getSearchState(cm)\n      var overlay = searchState.getOverlay()\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay)\n        }\n        overlay = searchOverlay(query)\n        cm.addOverlay(overlay)\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear()\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query))\n        }\n        searchState.setOverlay(overlay)\n      }\n    }\n    function findNext (cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1 }\n      return cm.operation(function () {\n        var pos = cm.getCursor()\n        var cursor = cm.getSearchCursor(query, pos)\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev)\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev) }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0))\n            if (!cursor.find(prev)) {\n              return\n            }\n          }\n        }\n        return cursor.from()\n      })\n    }\n    function clearSearchHighlight (cm) {\n      var state = getSearchState(cm)\n      cm.removeOverlay(getSearchState(cm).getOverlay())\n      state.setOverlay(null)\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear()\n        state.setScrollbarAnnotate(null)\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange (pos, start, end) {\n      if (typeof pos !== 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start)\n      } else {\n        if (end) {\n          return (pos >= start && pos <= end)\n        } else {\n          return pos == start\n        }\n      }\n    }\n    function getUserVisibleLines (cm) {\n      var scrollInfo = cm.getScrollInfo()\n      var occludeToleranceTop = 6\n      var occludeToleranceBottom = 10\n      var from = cm.coordsChar({left: 0, top: occludeToleranceTop + scrollInfo.top}, 'local')\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top\n      var to = cm.coordsChar({left: 0, top: bottomY}, 'local')\n      return {top: from.line, bottom: to.line}\n    }\n\n    function getMarkPos (cm, vim, markName) {\n      if (markName == '\\'') {\n        var history = cm.doc.history.done\n        var event = history[history.length - 2]\n        return event && event.ranges && event.ranges[0].head\n      }\n\n      var mark = vim.marks[markName]\n      return mark && mark.find()\n    }\n\n    var ExCommandDispatcher = function () {\n      this.buildCommandMap_()\n    }\n    ExCommandDispatcher.prototype = {\n      processCommand: function (cm, input, opt_params) {\n        var that = this\n        cm.operation(function () {\n          cm.curOp.isVimOp = true\n          that._processCommand(cm, input, opt_params)\n        })\n      },\n      _processCommand: function (cm, input, opt_params) {\n        var vim = cm.state.vim\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':')\n        var previousCommand = commandHistoryRegister.toString()\n        if (vim.visualMode) {\n          exitVisualMode(cm)\n        }\n        var inputStream = new CodeMirror.StringStream(input)\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input)\n        var params = opt_params || {}\n        params.input = input\n        try {\n          this.parseInput_(cm, inputStream, params)\n        } catch (e) {\n          showConfirm(cm, e)\n          throw e\n        }\n        var command\n        var commandName\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move'\n          }\n        } else {\n          command = this.matchCommand_(params.commandName)\n          if (command) {\n            commandName = command.name\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand)\n            }\n            this.parseCommandArgs_(inputStream, params, command)\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping')\n              }\n              return\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput)\n              return\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"')\n          return\n        }\n        try {\n          exCommands[commandName](cm, params)\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback()\n          }\n        } catch (e) {\n          showConfirm(cm, e)\n          throw e\n        }\n      },\n      parseInput_: function (cm, inputStream, result) {\n        inputStream.eatWhile(':')\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine()\n          result.lineEnd = cm.lastLine()\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream)\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream)\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+)/)\n        if (commandMatch) {\n          result.commandName = commandMatch[1]\n        } else {\n          result.commandName = inputStream.match(/.*/)[0]\n        }\n\n        return result\n      },\n      parseLineSpec_: function (cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/)\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line)\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine())\n          case '\\'':\n            var markName = inputStream.next()\n            var markPos = getMarkPos(cm, cm.state.vim, markName)\n            if (!markPos) throw new Error('Mark not set')\n            return this.parseLineSpecOffset_(inputStream, markPos.line)\n          case '-':\n          case '+':\n            inputStream.backUp(1)\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line)\n          default:\n            inputStream.backUp(1)\n            return undefined\n        }\n      },\n      parseLineSpecOffset_: function (inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/)\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10)\n          if (offsetMatch[1] == '-') {\n            line -= offset\n          } else {\n            line += offset\n          }\n        }\n        return line\n      },\n      parseCommandArgs_: function (inputStream, params, command) {\n        if (inputStream.eol()) {\n          return\n        }\n        params.argString = inputStream.match(/.*/)[0]\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/\n        var args = trim(params.argString).split(delim)\n        if (args.length && args[0]) {\n          params.args = args\n        }\n      },\n      matchCommand_: function (commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i)\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix]\n            if (command.name.indexOf(commandName) === 0) {\n              return command\n            }\n          }\n        }\n        return null\n      },\n      buildCommandMap_: function () {\n        this.commandMap_ = {}\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i]\n          var key = command.shortName || command.name\n          this.commandMap_[key] = command\n        }\n      },\n      map: function (lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings') }\n          var commandName = lhs.substring(1)\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            }\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            }\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            }\n            if (ctx) { mapping.context = ctx }\n            defaultKeymap.unshift(mapping)\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            }\n            if (ctx) { mapping.context = ctx }\n            defaultKeymap.unshift(mapping)\n          }\n        }\n      },\n      unmap: function (lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings') }\n          var commandName = lhs.substring(1)\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName]\n            return\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys &&\n                defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1)\n              return\n            }\n          }\n        }\n        throw Error('No such mapping.')\n      }\n    }\n\n    var exCommands = {\n      colorscheme: function (cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'))\n          return\n        }\n        cm.setOption('theme', params.args[0])\n      },\n      map: function (cm, params, ctx) {\n        var mapArgs = params.args\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input)\n          }\n          return\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx)\n      },\n      imap: function (cm, params) { this.map(cm, params, 'insert') },\n      nmap: function (cm, params) { this.map(cm, params, 'normal') },\n      vmap: function (cm, params) { this.map(cm, params, 'visual') },\n      unmap: function (cm, params, ctx) {\n        var mapArgs = params.args\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input)\n          }\n          return\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx)\n      },\n      move: function (cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n          type: 'motion',\n          motion: 'moveToLineOrEdgeOfDocument',\n          motionArgs: { forward: false,\n            explicitRepeat: true,\n            linewise: true },\n          repeatOverride: params.line + 1})\n      },\n      set: function (cm, params) {\n        var setArgs = params.args\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {}\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input)\n          }\n          return\n        }\n        var expr = setArgs[0].split('=')\n        var optionName = expr[0]\n        var value = expr[1]\n        var forceGet = false\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString) }\n          optionName = optionName.substring(0, optionName.length - 1)\n          forceGet = true\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2)\n          value = false\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean'\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg)\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message)\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName)\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue)\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg)\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message)\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'}\n        this.set(cm, params)\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'}\n        this.set(cm, params)\n      },\n      registers: function (cm, params) {\n        var regArgs = params.args\n        var registers = vimGlobalState.registerController.registers\n        var regInfo = '----------Registers----------<br><br>'\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString()\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>'\n            }\n          }\n        } else {\n          var registerName\n          regArgs = regArgs.join('')\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i)\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue\n            }\n            var register = registers[registerName] || new Register()\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>'\n          }\n        }\n        showConfirm(cm, regInfo)\n      },\n      sort: function (cm, params) {\n        var reverse, ignoreCase, unique, number, pattern\n        function parseArgs () {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString)\n            if (args.eat('!')) { reverse = true }\n            if (args.eol()) { return }\n            if (!args.eatSpace()) { return 'Invalid arguments' }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/)\n            if (!opts && !args.eol()) { return 'Invalid arguments' }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1\n              unique = opts[1].indexOf('u') != -1\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1\n              var hex = opts[1].indexOf('x') != -1 && 1\n              var octal = opts[1].indexOf('o') != -1 && 1\n              if (decimal + hex + octal > 1) { return 'Invalid arguments' }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal'\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '')\n            }\n          }\n        }\n        var err = parseArgs()\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString)\n          return\n        }\n        var lineStart = params.line || cm.firstLine()\n        var lineEnd = params.lineEnd || params.line || cm.lastLine()\n        if (lineStart == lineEnd) { return }\n        var curStart = Pos(lineStart, 0)\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd))\n        var text = cm.getRange(curStart, curEnd).split('\\n')\n        var numberRegex = pattern || (number == 'decimal') ? /(-?)([\\d]+)/\n           : (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i\n           : (number == 'octal') ? /([0-7]+)/ : null\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null\n        var numPart = [], textPart = []\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart)\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i])\n            } else {\n              textPart.push(text[i])\n            }\n          }\n        } else {\n          textPart = text\n        }\n        function compareFn (a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase() }\n          var anum = number && numberRegex.exec(a)\n          var bnum = number && numberRegex.exec(b)\n          if (!anum) { return a < b ? -1 : 1 }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix)\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix)\n          return anum - bnum\n        }\n        function comparePatternFn (a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase() }\n          return (a[0] < b[0]) ? -1 : 1\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn)\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input\n          }\n        } else if (!number) { textPart.sort(compareFn) }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart)\n        if (unique) { // Remove duplicate lines\n          var textOld = text\n          var lastLine\n          text = []\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i])\n            }\n            lastLine = textOld[i]\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd)\n      },\n      global: function (cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global')\n          return\n        }\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine()\n        var lineEnd = params.lineEnd || params.line || cm.lastLine()\n        // get the tokens from argString\n        var tokens = splitBySlash(argString)\n        var regexPart = argString, cmd\n        if (tokens.length) {\n          regexPart = tokens[0]\n          cmd = tokens.slice(1, tokens.length).join('/')\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */)\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart)\n            return\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery()\n        var matchedLines = [], content = ''\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i))\n          if (matched) {\n            matchedLines.push(i + 1)\n            content += cm.getLine(i) + '<br>'\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content)\n          return\n        }\n        var index = 0\n        var nextCommand = function () {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            })\n          }\n          index++\n        }\n        nextCommand()\n      },\n      substitute: function (cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.')\n        }\n        var argString = params.argString\n        var tokens = argString ? splitBySlash(argString) : []\n        var regexPart, replacePart = '', trailing, flagsPart, count\n        var confirm = false // Whether to confirm each replace.\n        var global = false // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0]\n          replacePart = tokens[1]\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n'\n            replacePart = replacePart ? replacePart + '\\n' : '\\n'\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart)\n            } else {\n              replacePart = translateRegexReplace(replacePart)\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : []\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/')\n            return\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0]\n          count = parseInt(trailing[1])\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true\n              flagsPart.replace('c', '')\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true\n              flagsPart.replace('g', '')\n            }\n            regexPart = regexPart + '/' + flagsPart\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */)\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart)\n            return\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression')\n          return\n        }\n        var state = getSearchState(cm)\n        var query = state.getQuery()\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line\n        var lineEnd = params.lineEnd || lineStart\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity\n        }\n        if (count) {\n          lineStart = lineEnd\n          lineEnd = lineStart + count - 1\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0))\n        var cursor = cm.getSearchCursor(query, startPos)\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback)\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function (cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm)\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save()\n        }\n      },\n      nohlsearch: function (cm) {\n        clearSearchHighlight(cm)\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor())\n        var line = cur.line\n        var lineText = cm.getLine(line)\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true)\n      },\n      delmarks: function (cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required')\n          return\n        }\n\n        var state = cm.state.vim\n        var stream = new CodeMirror.StringStream(trim(params.argString))\n        while (!stream.eol()) {\n          stream.eatSpace()\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count))\n            return\n          }\n\n          var sym = stream.next()\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count))\n              return\n            }\n\n            var startMark = sym\n            var finishMark = stream.next()\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0)\n              var finish = finishMark.charCodeAt(0)\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count))\n                return\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j)\n                delete state.marks[mark]\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-')\n              return\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym]\n          }\n        }\n      }\n    }\n\n    var exCommandDispatcher = new ExCommandDispatcher()\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace (cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true\n      var done = false\n      var lastPos = searchCursor.from()\n      function replaceAll () {\n        cm.operation(function () {\n          while (!done) {\n            replace()\n            next()\n          }\n          stop()\n        })\n      }\n      function replace () {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to())\n        var newText = text.replace(query, replaceWith)\n        searchCursor.replace(newText)\n      }\n      function next () {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while (searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue\n          }\n          cm.scrollIntoView(searchCursor.from(), 30)\n          cm.setSelection(searchCursor.from(), searchCursor.to())\n          lastPos = searchCursor.from()\n          done = false\n          return\n        }\n        done = true\n      }\n      function stop (close) {\n        if (close) { close() }\n        cm.focus()\n        if (lastPos) {\n          cm.setCursor(lastPos)\n          var vim = cm.state.vim\n          vim.exMode = false\n          vim.lastHPos = vim.lastHSPos = lastPos.ch\n        }\n        if (callback) { callback() }\n      }\n      function onPromptKeyDown (e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e)\n        var keyName = CodeMirror.keyName(e)\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break\n          case 'N':\n            next(); break\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback\n            callback = undefined\n            cm.operation(replaceAll)\n            callback = savedCallback\n            break\n          case 'L':\n            replace()\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close)\n            break\n        }\n        if (done) { stop(close) }\n        return true\n      }\n\n      // Actually do replace.\n      next()\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source)\n        return\n      }\n      if (!confirm) {\n        replaceAll()\n        if (callback) { callback() };\n        return\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      })\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      // call: cmKey\n    }\n\n    function exitInsertMode (cm) {\n      var vim = cm.state.vim\n      var macroModeState = vimGlobalState.macroModeState\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.')\n      var isPlaying = macroModeState.isPlaying\n      var lastChange = macroModeState.lastInsertModeChanges\n      // In case of visual block, the insertModeChanges are not saved as a\n      // single word, so we convert them to a single word\n      // so as to update the \". register as expected in real vim.\n      var text = []\n      if (!isPlaying) {\n        var selLength = lastChange.inVisualBlock ? vim.lastSelection.visualBlock.height : 1\n        var changes = lastChange.changes\n        var text = []\n        var i = 0\n        // In case of multiple selections in blockwise visual,\n        // the inserted text, for example: 'f<Backspace>oo', is stored as\n        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).\n        // We push the contents of the changes array as per the following:\n        // 1. In case of InsertModeKey, just increment by 1.\n        // 2. In case of a character, jump by selLength (2 in the example).\n        while (i < changes.length) {\n          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.\n          text.push(changes[i])\n          if (changes[i] instanceof InsertModeKey) {\n            i++\n          } else {\n            i += selLength\n          }\n        }\n        lastChange.changes = text\n        cm.off('change', onChange)\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown)\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */)\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat\n      }\n      delete vim.insertModeRepeat\n      vim.insertMode = false\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch - 1)\n      cm.setOption('keyMap', 'vim')\n      cm.setOption('disableInput', true)\n      cm.toggleOverwrite(false) // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''))\n      CodeMirror.signal(cm, 'vim-mode-change', {mode: 'normal'})\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState)\n      }\n    }\n\n    function _mapCommand (command) {\n      defaultKeymap.unshift(command)\n    }\n\n    function mapCommand (keys, type, name, args, extra) {\n      var command = {keys: keys, type: type}\n      command[type] = name\n      command[type + 'Args'] = args\n      for (var key in extra) { command[key] = extra[key] }\n      _mapCommand(command)\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number')\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      // fallthrough: ['default'],\n      fallthrough: [],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      // call: cmKey\n    }\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      // call: cmKey\n    }\n\n    function executeMacroRegister (cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0])\n        }\n        macroModeState.isPlaying = false\n        return\n      }\n      var keyBuffer = register.keyBuffer\n      var imc = 0\n      macroModeState.isPlaying = true\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0)\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i]\n        var match, key\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text)\n          key = match[0]\n          text = text.substring(match.index + key.length)\n          CodeMirror.Vim.handleKey(cm, key, 'macro')\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes\n            repeatInsertModeChanges(cm, changes, 1)\n            exitInsertMode(cm)\n          }\n        }\n      };\n      macroModeState.isPlaying = false\n    }\n\n    function logKey (macroModeState, key) {\n      if (macroModeState.isPlaying) { return }\n      var registerName = macroModeState.latestRegister\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (register) {\n        register.pushText(key)\n      }\n    }\n\n    function logInsertModeChange (macroModeState) {\n      if (macroModeState.isPlaying) { return }\n      var registerName = macroModeState.latestRegister\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges)\n      }\n    }\n\n    function logSearchQuery (macroModeState, query) {\n      if (macroModeState.isPlaying) { return }\n      var registerName = macroModeState.latestRegister\n      var register = vimGlobalState.registerController.getRegister(registerName)\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query)\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange (cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState\n      var lastChange = macroModeState.lastInsertModeChanges\n      if (!macroModeState.isPlaying) {\n        while (changeObj) {\n          lastChange.expectCursorActivityForChange = true\n          if (changeObj.origin == '+input' || changeObj.origin == 'paste' ||\n              changeObj.origin === undefined /* only in testing */) {\n            var text = changeObj.text.join('\\n')\n            if (lastChange.maybeReset) {\n              lastChange.changes = []\n              lastChange.maybeReset = false\n            }\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n              lastChange.changes.push([text])\n            } else {\n              lastChange.changes.push(text)\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity (cm) {\n      var vim = cm.state.vim\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState\n        if (macroModeState.isPlaying) { return }\n        var lastChange = macroModeState.lastInsertModeChanges\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim)\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm)\n      }\n    }\n    function updateFakeCursor (cm) {\n      var vim = cm.state.vim\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head))\n      var to = offsetCursor(from, 0, 1)\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear()\n      }\n      vim.fakeCursor = cm.markText(from, to, {className: 'cm-animate-fat-cursor'})\n    }\n    function handleExternalSelection (cm, vim) {\n      var anchor = cm.getCursor('anchor')\n      var head = cm.getCursor('head')\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false)\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true\n        vim.visualLine = false\n        CodeMirror.signal(cm, 'vim-mode-change', {mode: 'visual'})\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0\n        head = offsetCursor(head, 0, headOffset)\n        anchor = offsetCursor(anchor, 0, anchorOffset)\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        }\n        updateMark(cm, vim, '<', cursorMin(head, anchor))\n        updateMark(cm, vim, '>', cursorMax(head, anchor))\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey (keyName) {\n      this.keyName = keyName\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown (e) {\n      var macroModeState = vimGlobalState.macroModeState\n      var lastChange = macroModeState.lastInsertModeChanges\n      var keyName = CodeMirror.keyName(e)\n      if (!keyName) { return }\n      function onKeyFound () {\n        if (lastChange.maybeReset) {\n          lastChange.changes = []\n          lastChange.maybeReset = false\n        }\n        lastChange.changes.push(new InsertModeKey(keyName))\n        return true\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound)\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit (cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState\n      macroModeState.isPlaying = true\n      var isAction = !!vim.lastEditActionCommand\n      var cachedInputState = vim.inputState\n      function repeatCommand () {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand)\n        } else {\n          commandDispatcher.evalInput(cm, vim)\n        }\n      }\n      function repeatInsert (repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat\n          var changeObject = macroModeState.lastInsertModeChanges\n          repeatInsertModeChanges(cm, changeObject.changes, repeat)\n        }\n      }\n      vim.inputState = vim.lastEditInputState\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand()\n          repeatInsert(1)\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand()\n        }\n        repeatInsert(repeat)\n      }\n      vim.inputState = cachedInputState\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm)\n      }\n      macroModeState.isPlaying = false\n    };\n\n    function repeatInsertModeChanges (cm, changes, repeat) {\n      function keyHandler (binding) {\n        if (typeof binding === 'string') {\n          CodeMirror.commands[binding](cm)\n        } else {\n          binding(cm)\n        }\n        return true\n      }\n      var head = cm.getCursor('head')\n      var inVisualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock\n      if (inVisualBlock) {\n        // Set up block selection again for repeating the changes.\n        var vim = cm.state.vim\n        var lastSel = vim.lastSelection\n        var offset = getOffset(lastSel.anchor, lastSel.head)\n        selectForInsert(cm, head, offset.line + 1)\n        repeat = cm.listSelections().length\n        cm.setCursor(head)\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (inVisualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0))\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j]\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler)\n          } else if (typeof change === 'string') {\n            var cur = cm.getCursor()\n            cm.replaceRange(change, cur, cur)\n          } else {\n            var start = cm.getCursor()\n            var end = offsetCursor(start, 0, change[0].length)\n            cm.replaceRange(change[0], start, end)\n          }\n        }\n      }\n      if (inVisualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1))\n      }\n    }\n\n    resetVimGlobalState()\n\n    vimApi.commandDispatcher = commandDispatcher\n    vimApi.exCommandDispatcher = exCommandDispatcher\n    return vimApi\n  }\n\n  // Initialize Vim and make it available as an API.\n  return CodeMirror.Vim = Vim()\n}\n"],"file":"keymap.js"}